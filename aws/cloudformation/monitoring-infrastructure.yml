AWSTemplateFormatVersion: "2010-09-09"
Description: "Campus Vibe Monitoring Infrastructure - CloudWatch Dashboards, Alarms, and Cost Tracking"

Parameters:
  ProjectName:
    Type: String
    Default: campus-vibe
    Description: Name of the project

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment

  AlertEmail:
    Type: String
    Description: Email address for monitoring alerts
    Default: admin@example.com

  MonthlyBudget:
    Type: Number
    Default: 5.0
    Description: Monthly budget threshold in USD

  LambdaFunctionName:
    Type: String
    Description: Name of the Lambda function to monitor

  ApiGatewayId:
    Type: String
    Description: API Gateway ID to monitor
    Default: ""

Conditions:
  HasApiGateway: !Not [!Equals [!Ref ApiGatewayId, ""]]

Resources:
  # SNS Topic for Alerts
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-alerts"
      DisplayName: !Sub "${ProjectName} ${Environment} Monitoring Alerts"
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Email Subscription for Alerts
  AlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref AlertTopic
      Endpoint: !Ref AlertEmail

  # CloudWatch Log Groups
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LambdaFunctionName}"
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  CostMonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/cost-monitoring/${ProjectName}-${Environment}"
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub "${ProjectName}-${Environment}-monitoring"
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${LambdaFunctionName}"],
                  [".", "Errors", ".", "."],
                  [".", "Duration", ".", "."],
                  [".", "Throttles", ".", "."],
                  [".", "ConcurrentExecutions", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Performance Metrics",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CampusVibe/Application", "ApiRequests", "Method", "GET"],
                  ["...", "POST"],
                  ["...", "PUT"],
                  ["...", "DELETE"],
                  [".", "ApiErrors", "StatusClass", "4xx"],
                  ["...", "5xx"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Request Metrics",
                "period": 300,
                "stat": "Sum"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CampusVibe/Application", "EstimatedMonthlyCost", "Service", "CampusVibe"],
                  [".", "BudgetUtilization", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Cost Metrics",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": ${MonthlyBudget}
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 8,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CampusVibe/Application", "LambdaRequestsFreeTierUtilization", "Service", "CampusVibe"],
                  [".", "LambdaComputeFreeTierUtilization", ".", "."],
                  [".", "ApiGatewayFreeTierUtilization", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Free Tier Utilization",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "min": 0,
                    "max": 100
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 16,
              "y": 6,
              "width": 8,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CampusVibe/Application", "ApiResponseTime", "Method", "GET"],
                  ["...", "POST"],
                  [".", "DatabaseResponseTime", "Operation", "find"],
                  ["...", "create"],
                  ["...", "update"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Response Time Metrics",
                "period": 300,
                "stat": "Average",
                "yAxis": {
                  "left": {
                    "min": 0
                  }
                }
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["CampusVibe/Application", "MemoryHeapUsed", "FunctionName", "${LambdaFunctionName}"],
                  [".", "MemoryUtilization", ".", "."]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Memory Usage Metrics",
                "period": 300,
                "stat": "Average"
              }
            },
            {
              "type": "log",
              "x": 12,
              "y": 12,
              "width": 12,
              "height": 6,
              "properties": {
                "query": "SOURCE '/aws/lambda/${LambdaFunctionName}'\n| fields @timestamp, level, message, duration\n| filter level = \"ERROR\"\n| sort @timestamp desc\n| limit 20",
                "region": "${AWS::Region}",
                "title": "Recent Errors",
                "view": "table"
              }
            }
          ]
        }

  # Budget Utilization Alarms
  BudgetWarningAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-budget-warning"
      AlarmDescription: !Sub "Budget utilization has reached 80% for ${ProjectName} ${Environment}"
      MetricName: BudgetUtilization
      Namespace: CampusVibe/Application
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: Service
          Value: CampusVibe
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  BudgetCriticalAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-budget-critical"
      AlarmDescription: !Sub "Budget utilization has reached 95% for ${ProjectName} ${Environment}"
      MetricName: BudgetUtilization
      Namespace: CampusVibe/Application
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 95
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: Service
          Value: CampusVibe
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Performance Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-errors"
      AlarmDescription: !Sub "Lambda function error rate is high for ${LambdaFunctionName}"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-duration"
      AlarmDescription: !Sub "Lambda function duration is high for ${LambdaFunctionName}"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 3
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-throttles"
      AlarmDescription: !Sub "Lambda function is being throttled for ${LambdaFunctionName}"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunctionName
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Performance Alarms
  ApiResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-api-response-time"
      AlarmDescription: !Sub "API response time is above 2 seconds for ${ProjectName} ${Environment}"
      MetricName: ApiResponseTime
      Namespace: CampusVibe/Application
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2000
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  ApiErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-api-error-rate"
      AlarmDescription: !Sub "API error rate is high for ${ProjectName} ${Environment}"
      MetricName: ApiErrors
      Namespace: CampusVibe/Application
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Alarms (if API Gateway is provided)
  ApiGateway4xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasApiGateway
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-apigateway-4xx"
      AlarmDescription: !Sub "API Gateway 4xx error rate is high for ${ProjectName} ${Environment}"
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGatewayId
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasApiGateway
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-apigateway-5xx"
      AlarmDescription: !Sub "API Gateway 5xx error rate is high for ${ProjectName} ${Environment}"
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGatewayId
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Free Tier Utilization Alarms
  LambdaFreeTierAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-freetier"
      AlarmDescription: !Sub "Lambda free tier utilization is high for ${ProjectName} ${Environment}"
      MetricName: LambdaRequestsFreeTierUtilization
      Namespace: CampusVibe/Application
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref AlertTopic
      Dimensions:
        - Name: Service
          Value: CampusVibe
      TreatMissingData: notBreaching
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Cost Anomaly Detection
  CostAnomalyDetector:
    Type: AWS::CE::AnomalyDetector
    Properties:
      AnomalyDetectorName: !Sub "${ProjectName}-${Environment}-cost-anomaly"
      MonitorType: DIMENSIONAL
      MonitorSpecification: !Sub |
        {
          "Dimension": "SERVICE",
          "Key": "SERVICE",
          "Values": ["AWS Lambda", "Amazon API Gateway"],
          "MatchOptions": ["EQUALS"]
        }
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Cost Anomaly Subscription
  CostAnomalySubscription:
    Type: AWS::CE::AnomalySubscription
    Properties:
      SubscriptionName: !Sub "${ProjectName}-${Environment}-cost-alerts"
      MonitorArnList:
        - !GetAtt CostAnomalyDetector.AnomalyDetectorArn
      Subscribers:
        - Type: EMAIL
          Address: !Ref AlertEmail
      Frequency: DAILY
      Threshold: 10.0
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

Outputs:
  AlertTopicArn:
    Description: "SNS Topic ARN for monitoring alerts"
    Value: !Ref AlertTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlertTopicArn"

  DashboardName:
    Description: "CloudWatch Dashboard name"
    Value: !Ref MonitoringDashboard
    Export:
      Name: !Sub "${AWS::StackName}-DashboardName"

  DashboardURL:
    Description: "CloudWatch Dashboard URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${MonitoringDashboard}"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardURL"

  LogGroupName:
    Description: "CloudWatch Log Group name"
    Value: !Ref ApplicationLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupName"

  CostAnomalyDetectorArn:
    Description: "Cost Anomaly Detector ARN"
    Value: !GetAtt CostAnomalyDetector.AnomalyDetectorArn
    Export:
      Name: !Sub "${AWS::StackName}-CostAnomalyDetectorArn"
