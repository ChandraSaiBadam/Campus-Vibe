AWSTemplateFormatVersion: "2010-09-09"
Description: "Campus Vibe Frontend Infrastructure - S3 + CloudFront for cost-effective deployment"

Parameters:
  ProjectName:
    Type: String
    Default: campus-vibe
    Description: Name of the project (used for resource naming)

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment

  DomainName:
    Type: String
    Default: ""
    Description: Custom domain name (optional)

  CertificateArn:
    Type: String
    Default: ""
    Description: SSL certificate ARN for custom domain (optional)

  PriceClass:
    Type: String
    Default: PriceClass_100
    AllowedValues: [PriceClass_All, PriceClass_200, PriceClass_100]
    Description: CloudFront price class for cost optimization

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]
  UseCustomDomain: !And [!Condition HasCustomDomain, !Condition HasCertificate]

Resources:
  # S3 Bucket for static website hosting
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-frontend-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ["*"]
            ExposedHeaders: [ETag]
            MaxAge: 3000
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: Frontend Hosting

  # S3 Bucket Policy for public read access
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${S3Bucket}/*"
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"
            Action: s3:GetObject
            Resource: !Sub "${S3Bucket}/*"

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${ProjectName} ${Environment}"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${ProjectName} ${Environment} Frontend Distribution"
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: !Ref PriceClass

        # Origins
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"

        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          DefaultTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          MinTTL: 0
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TrustedSigners: []

        # Cache Behaviors for different file types
        CacheBehaviors:
          # Static assets (JS, CSS, images) - long cache
          - PathPattern: "/static/*"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            DefaultTTL: 31536000 # 1 year
            MaxTTL: 31536000 # 1 year
            MinTTL: 31536000 # 1 year
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

          # HTML files - short cache for SPA routing
          - PathPattern: "*.html"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            DefaultTTL: 300 # 5 minutes
            MaxTTL: 86400 # 1 day
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

          # Service Worker - no cache
          - PathPattern: "/sw.js"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD]
            CachedMethods: [GET, HEAD]
            Compress: true
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none

        # Custom Error Responses for SPA routing
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300

        # Custom Domain Configuration
        Aliases: !If
          - UseCustomDomain
          - [!Ref DomainName]
          - !Ref AWS::NoValue

        ViewerCertificate: !If
          - UseCustomDomain
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

        # Logging Configuration
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          IncludeCookies: false
          Prefix: cloudfront-logs/

        # Web ACL for security (optional)
        WebACLId: !Ref WebACL

      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CDN

  # S3 Bucket for CloudFront logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${ProjectName}-${Environment}-logs-${AWS::AccountId}"
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: Logging

  # CloudWatch Log Group for S3 events
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/s3/${ProjectName}-${Environment}"
      RetentionInDays: 14

  # WAF Web ACL for basic security
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name: !Sub "${ProjectName}-${Environment}-web-acl"
      Scope: CLOUDFRONT
      DefaultAction:
        Allow: {}
      Rules:
        # Rate limiting rule
        - Name: RateLimitRule
          Priority: 1
          Statement:
            RateBasedStatement:
              Limit: 2000
              AggregateKeyType: IP
          Action:
            Block: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: RateLimitRule

        # AWS Managed Rules - Core Rule Set
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 2
          OverrideAction:
            None: {}
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: CommonRuleSetMetric

      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Alarms for monitoring
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-high-error-rate"
      AlarmDescription: "High error rate detected in CloudFront distribution"
      MetricName: 4xxErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value: !Ref CloudFrontDistribution
      TreatMissingData: notBreaching

  # Cost monitoring alarm
  CostAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-cost-alarm"
      AlarmDescription: "Monthly cost exceeds budget threshold"
      MetricName: EstimatedCharges
      Namespace: AWS/Billing
      Statistic: Maximum
      Period: 86400
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Currency
          Value: USD

Outputs:
  S3BucketName:
    Description: "S3 bucket name for frontend hosting"
    Value: !Ref S3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"

  S3WebsiteURL:
    Description: "S3 website URL"
    Value: !GetAtt S3Bucket.WebsiteURL
    Export:
      Name: !Sub "${AWS::StackName}-S3WebsiteURL"

  CloudFrontDistributionId:
    Description: "CloudFront distribution ID"
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDistributionId"

  CloudFrontDomainName:
    Description: "CloudFront distribution domain name"
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDomainName"

  CloudFrontURL:
    Description: "CloudFront distribution URL"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontURL"

  CustomDomainURL:
    Condition: UseCustomDomain
    Description: "Custom domain URL"
    Value: !Sub "https://${DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-CustomDomainURL"

  LoggingBucket:
    Description: "S3 bucket for CloudFront logs"
    Value: !Ref LoggingBucket
    Export:
      Name: !Sub "${AWS::StackName}-LoggingBucket"
